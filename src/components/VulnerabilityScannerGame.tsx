import React, { useState, useEffect, useRef } from 'react';
import { Shield, Zap, Check, X, AlertTriangle, RefreshCw, Server, Clock, Database, Search, Terminal, FileWarning, ArrowRight, Eye, Lock, Unlock } from 'lucide-react';

interface Vulnerability {
  id: string;
  name: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  description: string;
  exploitability: number; // 1-10
  impact: number; // 1-10
  cve?: string;
  remediation: string;
  category: string;
  found: boolean;
  falsePositive: boolean;
}

interface ScanTarget {
  id: string;
  name: string;
  description: string;
  type: 'webserver' | 'database' | 'network' | 'webapp' | 'api';
  difficulty: 'easy' | 'medium' | 'hard';
  icon: React.ReactNode;
  vulnerabilities: Vulnerability[];
}

const VulnerabilityScannerGame: React.FC = () => {
  const [scanTargets, setScanTargets] = useState<ScanTarget[]>([
    {
      id: 'target1',
      name: 'Corporate Web Server',
      description: 'Main company website running on Apache with PHP',
      type: 'webserver',
      difficulty: 'easy',
      icon: <Server className="h-6 w-6" />,
      vulnerabilities: [
        {
          id: 'vuln1',
          name: 'SQL Injection Vulnerability',
          severity: 'high',
          description: 'The login form is vulnerable to SQL injection attacks, allowing attackers to bypass authentication.',
          exploitability: 8,
          impact: 9,
          cve: 'CVE-2022-12345',
          remediation: 'Implement prepared statements and parameterized queries.',
          category: 'Injection',
          found: false,
          falsePositive: false
        },
        {
          id: 'vuln2',
          name: 'Outdated PHP Version',
          severity: 'medium',
          description: 'The server is running PHP 7.1 which has reached end-of-life and contains known vulnerabilities.',
          exploitability: 6,
          impact: 6,
          remediation: 'Upgrade to the latest supported PHP version (8.x).',
          category: 'Outdated Components',
          found: false,
          falsePositive: false
        },
        {
          id: 'vuln3',
          name: 'Cross-Site Scripting (XSS)',
          severity: 'medium',
          description: 'The comment section allows arbitrary JavaScript execution.',
          exploitability: 7,
          impact: 6,
          cve: 'CVE-2022-67890',
          remediation: 'Implement proper output encoding and Content Security Policy.',
          category: 'XSS',
          found: false,
          falsePositive: false
        },
        {
          id: 'vuln4',
          name: 'Information Disclosure',
          severity: 'low',
          description: 'Server exposes detailed error messages that reveal internal implementation details.',
          exploitability: 3,
          impact: 3,
          remediation: 'Configure error handling to show generic error messages to users.',
          category: 'Information Disclosure',
          found: false,
          falsePositive: false
        },
        {
          id: 'vuln5',
          name: 'Exposure of .git Directory',
          severity: 'medium',
          description: 'The .git directory is accessible, potentially exposing source code and configuration.',
          exploitability: 5,
          impact: 7,
          remediation: 'Configure the web server to deny access to .git and other hidden directories.',
          category: 'Misconfiguration',
          found: false,
          falsePositive: false
        }
      ]
    },
    {
      id: 'target2',
      name: 'Customer Database Server',
      description: 'PostgreSQL database storing customer information',
      type: 'database',
      difficulty: 'medium',
      icon: <Database className="h-6 w-6" />,
      vulnerabilities: [
        {
          id: 'vuln6',
          name: 'Weak Database Credentials',
          severity: 'critical',
          description: 'Database uses default or weak credentials that are susceptible to brute force attacks.',
          exploitability: 9,
          impact: 10,
          remediation: 'Implement strong password policy and rotate credentials regularly.',
          category: 'Authentication',
          found: false,
          falsePositive: false
        },
        {
          id: 'vuln7',
          name: 'Excessive Privileges',
          severity: 'high',
          description: 'Database users have more privileges than necessary for their functions.',
          exploitability: 7,
          impact: 8,
          remediation: 'Implement principle of least privilege for all database users.',
          category: 'Access Control',
          found: false,
          falsePositive: false
        },
        {
          id: 'vuln8',
          name: 'Unencrypted Sensitive Data',
          severity: 'high',
          description: 'Customer PII is stored in plaintext without encryption.',
          exploitability: 6,
          impact: 9,
          cve: 'CVE-2023-45678',
          remediation: 'Implement data encryption for sensitive information both at rest and in transit.',
          category: 'Sensitive Data',
          found: false,
          falsePositive: false
        },
        {
          id: 'vuln9',
          name: 'Public Network Exposure',
          severity: 'high',
          description: 'Database is directly accessible from the public internet instead of being restricted to internal networks.',
          exploitability: 8,
          impact: 9,
          remediation: 'Place database behind firewall and use VPN for remote access.',
          category: 'Network Security',
          found: false,
          falsePositive: false
        },
        {
          id: 'vuln10',
          name: 'Suspicious User Activity',
          severity: 'medium',
          description: 'Unusual login patterns detected from various IP addresses.',
          exploitability: 5,
          impact: 6,
          remediation: 'Investigate login patterns and implement multi-factor authentication.',
          category: 'Suspicious Activity',
          found: false,
          falsePositive: true
        }
      ]
    },
    {
      id: 'target3',
      name: 'Internal API Gateway',
      description: 'REST API service handling internal communications',
      type: 'api',
      difficulty: 'hard',
      icon: <Zap className="h-6 w-6" />,
      vulnerabilities: [
        {
          id: 'vuln11',
          name: 'Missing Authentication',
          severity: 'critical',
          description: 'Several API endpoints do not require authentication.',
          exploitability: 10,
          impact: 10,
          remediation: 'Implement proper authentication for all API endpoints.',
          category: 'Authentication',
          found: false,
          falsePositive: false
        },
        {
          id: 'vuln12',
          name: 'Improper Access Control',
          severity: 'high',
          description: 'Authenticated users can access resources belonging to other users by manipulating API parameters.',
          exploitability: 8,
          impact: 9,
          cve: 'CVE-2023-23456',
          remediation: 'Implement proper authorization checks on all API endpoints.',
          category: 'Access Control',
          found: false,
          falsePositive: false
        },
        {
          id: 'vuln13',
          name: 'Rate Limiting Bypass',
          severity: 'medium',
          description: 'API rate limiting can be bypassed using multiple IP addresses.',
          exploitability: 6,
          impact: 7,
          remediation: 'Implement robust rate limiting based on user accounts rather than just IP addresses.',
          category: 'Security Misconfiguration',
          found: false,
          falsePositive: false
        },
        {
          id: 'vuln14',
          name: 'Missing TLS Validation',
          severity: 'medium',
          description: 'API client does not properly validate TLS certificates, susceptible to MITM attacks.',
          exploitability: 7,
          impact: 8,
          remediation: 'Enable strict TLS certificate validation in API clients.',
          category: 'Cryptographic Issues',
          found: false,
          falsePositive: false
        },
        {
          id: 'vuln15',
          name: 'Hardcoded Secret Keys',
          severity: 'high',
          description: 'API secret keys and credentials are hardcoded in the application code.',
          exploitability: 7,
          impact: 9,
          remediation: 'Move secrets to secure environment variables or a secrets management solution.',
          category: 'Sensitive Data',
          found: false,
          falsePositive: false
        }
      ]
    }
  ]);

  const [selectedTarget, setSelectedTarget] = useState<ScanTarget | null>(null);
  const [scanning, setScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [scanLogs, setScanLogs] = useState<string[]>([]);
  const [foundVulnerabilities, setFoundVulnerabilities] = useState<Vulnerability[]>([]);
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);
  const [userScore, setUserScore] = useState(0);
  const [showTutorial, setShowTutorial] = useState(false);
  const [scanComplete, setScanComplete] = useState(false);
  
  const logsEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (logsEndRef.current) {
      logsEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [scanLogs]);

  const startScan = () => {
    if (!selectedTarget || scanning) return;
    
    setScanning(true);
    setScanProgress(0);
    setScanLogs([`[${new Date().toLocaleTimeString()}] Starting vulnerability scan on ${selectedTarget.name}...`]);
    setFoundVulnerabilities([]);
    setScanComplete(false);

    const totalVulnerabilities = selectedTarget.vulnerabilities.length;
    const scanDuration = 8000; // 8 seconds for the full scan
    
    const updateIntervalDuration = 50; // 50ms between updates
    const totalSteps = scanDuration / updateIntervalDuration;
    
    // Scan logs to show during the process
    const scanSteps = [
      { progress: 5, log: `Initializing scanner...` },
      { progress: 10, log: `Performing port scan...` },
      { progress: 20, log: `Detecting services and versions...` },
      { progress: 30, log: `Checking for known vulnerabilities...` },
      { progress: 50, log: `Running web application security checks...` },
      { progress: 60, log: `Testing for injection vulnerabilities...` },
      { progress: 70, log: `Checking authentication mechanisms...` },
      { progress: 80, log: `Scanning for misconfigurations...` },
      { progress: 90, log: `Finalizing results...` }
    ];
    
    // Add some randomness to when vulnerabilities are "found"
    const vulnerabilityDiscoveryPoints = selectedTarget.vulnerabilities.map((_, index) => {
      // Discover vulnerabilities between 25% and 95% progress
      return Math.floor(Math.random() * 70) + 25;
    });

    let step = 0;
    const interval = setInterval(() => {
      step++;
      const newProgress = Math.min(100, Math.round((step / totalSteps) * 100));
      
      // Add pre-defined log messages
      scanSteps.forEach(scanStep => {
        if (newProgress === scanStep.progress) {
          setScanLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] ${scanStep.log}`]);
        }
      });
      
      // "Discover" vulnerabilities
      vulnerabilityDiscoveryPoints.forEach((point, index) => {
        if (newProgress === point) {
          const vulnerability = selectedTarget.vulnerabilities[index];
          
          // 85% chance of detecting a vulnerability that exists
          // 15% chance of missing it
          const detected = Math.random() > 0.15 || vulnerability.severity === 'critical';
          
          if (detected && !vulnerability.falsePositive) {
            setScanLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] [${vulnerability.severity.toUpperCase()}] Found potential ${vulnerability.category} vulnerability: ${vulnerability.name}`]);
            setFoundVulnerabilities(prev => [...prev, {...vulnerability, found: true}]);
          } else if (detected && vulnerability.falsePositive) {
            // For false positives, still show them
            setScanLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] [${vulnerability.severity.toUpperCase()}] Found potential ${vulnerability.category} vulnerability: ${vulnerability.name}`]);
            setFoundVulnerabilities(prev => [...prev, {...vulnerability, found: true}]);
          }
        }
      });
      
      // Add some random "noise" logs
      if (Math.random() < 0.1 && newProgress > 15 && newProgress < 95) {
        const noiseLogs = [
          "Checking service configurations...",
          "Testing default credentials...",
          "Scanning for open ports...",
          "Analyzing response headers...",
          "Checking TLS/SSL configuration...",
          "Testing for common OWASP vulnerabilities...",
          "Checking for sensitive data exposure...",
          "Running CVSS analysis...",
          "Detecting outdated software versions..."
        ];
        const randomLog = noiseLogs[Math.floor(Math.random() * noiseLogs.length)];
        setScanLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] ${randomLog}`]);
      }
      
      setScanProgress(newProgress);
      
      if (newProgress >= 100) {
        clearInterval(interval);
        setScanLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] Scan completed. Found ${foundVulnerabilities.length} potential vulnerabilities.`]);
        setScanComplete(true);
        setScanning(false);
      }
    }, updateIntervalDuration);
    
    return () => clearInterval(interval);
  };
  
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return "text-red-500 bg-red-900/30 border-red-700/50";
      case 'high':
        return "text-orange-500 bg-orange-900/30 border-orange-700/50";
      case 'medium':
        return "text-yellow-500 bg-yellow-900/30 border-yellow-700/50";
      case 'low':
        return "text-blue-400 bg-blue-900/30 border-blue-700/50";
      case 'info':
        return "text-gray-400 bg-gray-900/30 border-gray-700/50";
      default:
        return "text-gray-400 bg-gray-900/30 border-gray-700/50";
    }
  };
  
  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <AlertTriangle className="h-5 w-5 text-red-500" />;
      case 'high':
        return <AlertTriangle className="h-5 w-5 text-orange-500" />;
      case 'medium':
        return <AlertTriangle className="h-5 w-5 text-yellow-500" />;
      case 'low':
        return <AlertTriangle className="h-5 w-5 text-blue-400" />;
      case 'info':
        return <AlertTriangle className="h-5 w-5 text-gray-400" />;
      default:
        return <AlertTriangle className="h-5 w-5 text-gray-400" />;
    }
  };
  
  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'webserver':
        return <Server className="h-5 w-5 text-[var(--matrix-color)]" />;
      case 'database':
        return <Database className="h-5 w-5 text-[var(--matrix-color)]" />;
      case 'network':
        return <Zap className="h-5 w-5 text-[var(--matrix-color)]" />;
      case 'webapp':
        return <FileWarning className="h-5 w-5 text-[var(--matrix-color)]" />;
      case 'api':
        return <Zap className="h-5 w-5 text-[var(--matrix-color)]" />;
      default:
        return <Server className="h-5 w-5 text-[var(--matrix-color)]" />;
    }
  };
  
  const calculateRiskScore = (exploitability: number, impact: number) => {
    return Math.round((exploitability * impact) / 10);
  };

  const verifyVulnerability = (vulnId: string, isRealVulnerability: boolean) => {
    if (!selectedTarget) return;
    
    const vulnerability = foundVulnerabilities.find(v => v.id === vulnId);
    if (!vulnerability) return;
    
    const isCorrect = (vulnerability.falsePositive && !isRealVulnerability) || 
                     (!vulnerability.falsePositive && isRealVulnerability);
    
    // Update score
    let scoreChange = 0;
    if (isCorrect) {
      // Score based on severity
      switch (vulnerability.severity) {
        case 'critical':
          scoreChange = 15;
          break;
        case 'high':
          scoreChange = 10;
          break;
        case 'medium':
          scoreChange = 7;
          break;
        case 'low':
          scoreChange = 5;
          break;
        case 'info':
          scoreChange = 2;
          break;
      }
    } else {
      // Penalty for incorrect classification
      scoreChange = -5;
    }
    
    setUserScore(prev => prev + scoreChange);
    
    // Update vulnerability status in the list
    const updatedVulnerabilities = foundVulnerabilities.map(v => {
      if (v.id === vulnId) {
        return {
          ...v,
          verified: true,
          correctlyClassified: isCorrect
        };
      }
      return v;
    });
    
    setFoundVulnerabilities(updatedVulnerabilities);
    
    // Add to scan log
    setScanLogs(prev => [
      ...prev, 
      `[${new Date().toLocaleTimeString()}] [ANALYST] Marked "${vulnerability.name}" as ${isRealVulnerability ? 'real vulnerability' : 'false positive'}: ${isCorrect ? 'CORRECT' : 'INCORRECT'} (+${scoreChange} points)`
    ]);
  };
  
  return (
    <div className="font-mono text-sm">
      <div className="mb-6 flex justify-between items-center">
        <h2 className="text-xl font-bold text-white flex items-center">
          <Shield className="h-6 w-6 text-[var(--matrix-color)] mr-2" />
          <span>Vulnerability Scanner <span className="text-[var(--matrix-color)]">Simulation</span></span>
        </h2>
        <div className="flex items-center">
          <div className="mr-4 flex items-center bg-[var(--matrix-color)]/10 px-3 py-1 rounded-md border border-[var(--matrix-color)]/30">
            <Terminal className="h-4 w-4 text-[var(--matrix-color)] mr-1.5" />
            <span className="text-[var(--matrix-color)] font-bold">{userScore}</span>
            <span className="text-gray-400 ml-1">pts</span>
          </div>
          <button 
            onClick={() => setShowTutorial(!showTutorial)} 
            className="cyber-button px-3 py-1"
          >
            {showTutorial ? 'Hide Tutorial' : 'Show Tutorial'}
          </button>
        </div>
      </div>
      
      {showTutorial && (
        <div className="mb-6 bg-black/40 border border-[var(--matrix-color)]/20 rounded-lg p-4 text-gray-300">
          <h3 className="font-bold text-[var(--matrix-color)] mb-2">How to Use the Vulnerability Scanner</h3>
          <ol className="space-y-2 list-decimal pl-5">
            <li>Select a target system to scan from the available options</li>
            <li>Click the "Start Scan" button to begin the vulnerability assessment</li>
            <li>Review scan logs and discovered vulnerabilities as they appear</li>
            <li>For each vulnerability, determine if it's a real issue or a false positive</li>
            <li>Click "Confirm" if you believe it's a real vulnerability, or "False Positive" if not</li>
            <li>Earn points for correct assessments and classifications</li>
            <li>Review the vulnerability details to learn about different types of security issues</li>
          </ol>
          <p className="mt-3 text-sm text-gray-400">This simulation helps you practice vulnerability analysis and develop skills for identifying security issues in real systems.</p>
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="md:col-span-1">
          <div className="cyber-card p-4 mb-4">
            <h3 className="font-bold text-white mb-3 flex items-center">
              <Server className="h-5 w-5 text-[var(--matrix-color)] mr-1.5" />
              Scan Targets
            </h3>
            <div className="space-y-2">
              {scanTargets.map((target) => (
                <div 
                  key={target.id}
                  onClick={() => !scanning && setSelectedTarget(target)}
                  className={`p-3 rounded-md cursor-pointer border transition-colors ${
                    selectedTarget?.id === target.id 
                      ? 'bg-[var(--matrix-color)]/10 border-[var(--matrix-color)]/40' 
                      : 'bg-gray-800 border-gray-700 hover:border-gray-600'
                  }`}
                >
                  <div className="flex items-center">
                    {target.icon}
                    <div className="ml-2">
                      <div className="font-medium">{target.name}</div>
                      <div className="text-xs text-gray-400">{target.type}</div>
                    </div>
                  </div>
                  <p className="text-xs text-gray-400 mt-1">{target.description}</p>
                  <div className="mt-2 flex items-center">
                    <span className="text-xs px-2 py-0.5 rounded-full bg-gray-700 text-gray-300">
                      {target.difficulty === 'easy' ? 'Easy' : 
                       target.difficulty === 'medium' ? 'Medium' : 'Hard'}
                    </span>
                    <span className="text-xs text-gray-500 ml-2">
                      {target.vulnerabilities.length} potential vulnerabilities
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          <div className="cyber-card p-4">
            <button
              onClick={startScan}
              disabled={!selectedTarget || scanning}
              className={`w-full cyber-button py-2 px-4 flex items-center justify-center ${!selectedTarget || scanning ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              {scanning ? (
                <>
                  <RefreshCw className="h-5 w-5 mr-2 animate-spin" />
                  Scanning...
                </>
              ) : (
                <>
                  <Search className="h-5 w-5 mr-2" />
                  Start Scan
                </>
              )}
            </button>
            
            {selectedTarget && (
              <div className="mt-4">
                <h3 className="font-bold text-white mb-1">Selected Target:</h3>
                <div className="p-2 rounded bg-black/40 text-gray-300">
                  <div className="flex items-center">
                    {getTypeIcon(selectedTarget.type)}
                    <span className="ml-2 font-medium">{selectedTarget.name}</span>
                  </div>
                  <p className="text-xs text-gray-400 mt-1">{selectedTarget.description}</p>
                </div>
              </div>
            )}
            
            {scanning && (
              <div className="mt-4">
                <div className="flex justify-between items-center mb-1">
                  <span className="text-xs text-gray-400">Scan Progress</span>
                  <span className="text-xs text-[var(--matrix-color)]">{scanProgress}%</span>
                </div>
                <div className="h-2 w-full bg-gray-800 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-gradient-to-r from-[var(--matrix-color)] to-green-400 rounded-full" 
                    style={{width: `${scanProgress}%`}}
                  ></div>
                </div>
              </div>
            )}
          </div>
        </div>
        
        <div className="md:col-span-3 space-y-4">
          {/* Scan output */}
          <div className="cyber-card p-4">
            <div className="flex items-center justify-between mb-2">
              <h3 className="font-bold text-white flex items-center">
                <Terminal className="h-5 w-5 text-[var(--matrix-color)] mr-1.5" />
                Scan Logs
              </h3>
              <div className="text-xs text-gray-400 flex items-center">
                <Clock className="h-3.5 w-3.5 mr-1" />
                {new Date().toLocaleTimeString()}
              </div>
            </div>
            <div className="bg-black/70 border border-gray-800 rounded-md p-2 h-44 overflow-y-auto font-mono">
              {scanLogs.length === 0 ? (
                <div className="text-gray-500 text-xs p-2">No scan logs yet. Select a target and start a scan.</div>
              ) : (
                scanLogs.map((log, index) => {
                  const isCritical = log.includes('[CRITICAL]');
                  const isHigh = log.includes('[HIGH]');
                  const isMedium = log.includes('[MEDIUM]');
                  const isLow = log.includes('[LOW]');
                  
                  let logClass = "text-gray-400 text-xs";
                  if (isCritical) logClass = "text-red-500 text-xs";
                  else if (isHigh) logClass = "text-orange-500 text-xs";
                  else if (isMedium) logClass = "text-yellow-500 text-xs";
                  else if (isLow) logClass = "text-blue-400 text-xs";
                  
                  return (
                    <div key={index} className={`p-1 ${logClass}`}>
                      {log}
                    </div>
                  );
                })
              )}
              <div ref={logsEndRef} />
            </div>
          </div>
          
          {/* Vulnerabilities Panel */}
          <div className="cyber-card p-4">
            <h3 className="font-bold text-white mb-3 flex items-center">
              <Shield className="h-5 w-5 text-[var(--matrix-color)] mr-1.5" />
              Discovered Vulnerabilities
            </h3>
            
            {foundVulnerabilities.length === 0 ? (
              <div className="text-center py-6 border border-dashed border-gray-700 rounded-md">
                <FileWarning className="h-10 w-10 mx-auto mb-2 text-gray-600" />
                <p className="text-gray-500">No vulnerabilities found yet</p>
                <p className="text-xs text-gray-600 mt-1">Start a scan to discover security issues</p>
              </div>
            ) : (
              <div className="space-y-3">
                {foundVulnerabilities.map((vuln) => (
                  <div 
                    key={vuln.id} 
                    className={`border rounded-md overflow-hidden ${
                      (vuln as any).verified 
                        ? (vuln as any).correctlyClassified 
                          ? "border-green-600" 
                          : "border-red-600" 
                        : "border-gray-700"
                    }`}
                  >
                    <div 
                      className={`p-3 cursor-pointer ${getSeverityColor(vuln.severity)}`}
                      onClick={() => setSelectedVulnerability(selectedVulnerability?.id === vuln.id ? null : vuln)}
                    >
                      <div className="flex justify-between">
                        <div className="flex items-center">
                          {getSeverityIcon(vuln.severity)}
                          <span className="ml-2 font-medium">{vuln.name}</span>
                        </div>
                        <div className="text-xs px-2 py-0.5 rounded-full bg-black/30 uppercase">
                          {vuln.severity}
                        </div>
                      </div>
                      <div className="text-xs mt-1 text-gray-300">
                        {vuln.description.length > 100 
                          ? vuln.description.substring(0, 100) + '...' 
                          : vuln.description}
                      </div>
                      
                      {(vuln as any).verified && (
                        <div className={`mt-2 text-xs ${(vuln as any).correctlyClassified ? "text-green-400" : "text-red-400"} flex items-center`}>
                          {(vuln as any).correctlyClassified 
                            ? <><Check className="h-3.5 w-3.5 mr-1" /> Correctly classified</> 
                            : <><X className="h-3.5 w-3.5 mr-1" /> Incorrectly classified</>}
                        </div>
                      )}
                    </div>
                    
                    {selectedVulnerability?.id === vuln.id && (
                      <div className="p-3 border-t border-gray-700 bg-black/30">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                          <div>
                            <div className="text-xs text-gray-400 mb-1">Category</div>
                            <div className="text-sm">{vuln.category}</div>
                          </div>
                          <div>
                            <div className="text-xs text-gray-400 mb-1">Risk Score</div>
                            <div className="text-sm">{calculateRiskScore(vuln.exploitability, vuln.impact)}/10</div>
                          </div>
                          <div>
                            <div className="text-xs text-gray-400 mb-1">Exploitability</div>
                            <div className="text-sm">{vuln.exploitability}/10</div>
                          </div>
                          <div>
                            <div className="text-xs text-gray-400 mb-1">Impact</div>
                            <div className="text-sm">{vuln.impact}/10</div>
                          </div>
                        </div>
                        
                        <div className="mb-3">
                          <div className="text-xs text-gray-400 mb-1">Description</div>
                          <div className="text-sm text-gray-300">{vuln.description}</div>
                        </div>
                        
                        <div className="mb-4">
                          <div className="text-xs text-gray-400 mb-1">Remediation</div>
                          <div className="text-sm text-gray-300">{vuln.remediation}</div>
                        </div>
                        
                        {!(vuln as any).verified && scanComplete && (
                          <div className="flex space-x-2">
                            <button 
                              onClick={() => verifyVulnerability(vuln.id, true)}
                              className="flex-1 bg-[#1a2a1a] text-[var(--matrix-color)] border border-[var(--matrix-color)]/50 rounded-md py-1.5 hover:bg-[#2a3a2a] transition-colors flex items-center justify-center"
                            >
                              <Check className="h-4 w-4 mr-1.5" />
                              Confirm Vulnerability
                            </button>
                            <button 
                              onClick={() => verifyVulnerability(vuln.id, false)}
                              className="flex-1 bg-gray-800 text-gray-300 border border-gray-700 rounded-md py-1.5 hover:bg-gray-700 transition-colors flex items-center justify-center"
                            >
                              <X className="h-4 w-4 mr-1.5" />
                              Mark as False Positive
                            </button>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
            
            {scanComplete && foundVulnerabilities.length > 0 && (
              <div className="mt-4 pt-3 border-t border-gray-700">
                <div className="flex justify-between text-sm">
                  <div>Vulnerabilities found: <span className="text-[var(--matrix-color)]">{foundVulnerabilities.length}</span></div>
                  <div>Your score: <span className="text-[var(--matrix-color)]">{userScore}</span></div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityScannerGame;